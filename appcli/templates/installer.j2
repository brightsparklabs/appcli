#!/usr/bin/env bash

{% set app_name_slug_lower = cli_context.app_name_slug|lower %}

##
 # Pipe this through bash to install {{ app_name_slug_lower }}.
 #
 # Application version: {{ cli_context.app_version }}
 ##

# ------------------------------------------------------------------------------
# VARIABLES
# ------------------------------------------------------------------------------

# 'true' if the script should automatically initialise and apply configuration. 'false' otherwise.
AUTO_CONFIGURE={{ configuration.auto_configure_on_install|lower }}

# ------------------------------------------------------------------------------
# FUNCTIONS
# ------------------------------------------------------------------------------

##
 # Main entrypoint.
 #
 # @param $@ Arguments passed in on the command line.
 ##
function main()
{
    process_args $@

    mkdir -p "{{ install_dir }}" || print_error_and_exit "Could not create [{{ install_dir }}]"
    [[ -w "{{ install_dir }}" ]] || print_error_and_exit "No permissions to write to [{{ install_dir }}]"

    cd "{{ install_dir }}"

    # Create versioned launcher
    local _launcher_versioned=".$(date -Isec --utc)_{{ app_name_slug_lower }}_{{ cli_context.app_version }}"
    generate_launcher > "${_launcher_versioned}" || print_error_and_exit "Could not generate launcher at $(pwd)/[${_launcher_versioned}]"
    chmod a+x "${_launcher_versioned}"

    local _launcher_generic="{{ app_name_slug_lower }}"

    # If the generic launcher already exists, upgrade the existing application.
    local _install_type=install
    if [[ -e "${_launcher_generic}" ]]; then
        _install_type=upgrade
        upgrade_existing_application "${_launcher_generic}" "${_launcher_versioned}"
    fi

    # Update the symlink to the generic launcher
    rm -f "${_launcher_generic}" || print_error_and_exit "No permissions to delete to [${_launcher_generic}]"
    ln -s "${_launcher_versioned}" "${_launcher_generic}"

    # Auto configure if enabled.
    if [[ $AUTO_CONFIGURE = true ]]; then
        # Only need to init if an install (i.e. not an upgrade)
        [[ "${_install_type}" == "install" ]] && NO_TTY=true {{ install_dir }}/${_launcher_generic} configure init

        NO_TTY=true {{ install_dir }}/${_launcher_generic} configure apply
    fi

    >&2 cat <<EOF
    $(date -Isec --utc) INFO: {{ app_name_slug_lower }} version [{{ cli_context.app_version }}] can be launched via:

        {{ install_dir }}/{{ app_name_slug_lower }}

EOF
}

##
 # Processes the arguments passed in on the command line.
 #
 # @param $@ Arguments passed in on the command line.
 ##
function process_args()
{
    # Process long options. Not using 'getopt' as that is non-POSIX and not built-in to bash.
    local _arg
    for _arg in "$@"
    do
        shift
        case "${_arg}" in
               "--auto-configure") AUTO_CONFIGURE=true ;;
            "--no-auto-configure") AUTO_CONFIGURE=false ;;
        esac
    done
}

##
 # Creates the launcher script and prints it to stdout.
 ##
function generate_launcher()
{
    docker run \
        --name {{ app_name_slug_lower }}_{{ cli_context.environment }}_launcher_$(date +%s) \
        --rm \
        {{ configuration.docker_image }}:{{ cli_context.app_version }} \
            --configuration-dir "{{ cli_context.configuration_dir }}" \
            --data-dir "{{ cli_context.data_dir }}" \
            --backup-dir "{{cli_context.backup_dir }}" \
            --environment "{{ cli_context.environment }}" \
{% if cli_context.docker_credentials_file %}
            --docker-credentials-file "{{ cli_context.docker_credentials_file }}" \
{% endif %}
{% for name, path in cli_context.additional_data_dirs %}
            --additional-data-dir {{ name }}="{{ path }}" \
{% endfor %}
{% for name, value in cli_context.additional_env_variables %}
            --additional-env-var {{ name }}="{{ value }}" \
{% endfor %}
{% if cli_context.debug %}
            --debug \
{% endif %}
            launcher
}

##
 # Upgrades an existing installation of the application.
 #
 # This will stop the system (if running), migrate configuration and apply it.
 # The system will be left in a stopped state.
 #
 # @param $1 The path of the existing launcher script.
 # @param $1 The path of the new launcher script.
 ##
function upgrade_existing_application()
{
    local _launcher_existing="$(realpath ${1})"
    local _launcher_upgrade="$(realpath ${2})"

    >&2 echo "$(date -Isec --utc) INFO: Installing an upgrade on existing application..."

    # Stop services and apply with the old launcher
    NO_TTY=true ${_launcher_existing} service stop
    NO_TTY=true ${_launcher_existing} configure apply --force

    # Migrate and apply with the new launcher
    NO_TTY=true ${_launcher_upgrade} migrate
    NO_TTY=true ${_launcher_upgrade} configure apply --force
}

##
 # Prints an error message and exits with a non-zero exit code.
 #
 # @param $@ The error message to print.
 ##
function print_error_and_exit()
{
    >&2 echo "$(date -Isec --utc) ERROR: $@"
    exit 1
}

# ------------------------------------------------------------------------------
# LOGIC
# ------------------------------------------------------------------------------

main $@
